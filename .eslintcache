[{"/Users/dovieshalev/Documents/Coding/biologyQuizWebsite/frontend/src/index.js":"1","/Users/dovieshalev/Documents/Coding/biologyQuizWebsite/frontend/src/App.js":"2","/Users/dovieshalev/Documents/Coding/biologyQuizWebsite/frontend/src/Quiz.js":"3","/Users/dovieshalev/Documents/Coding/biologyQuizWebsite/frontend/src/Home.js":"4","/Users/dovieshalev/Documents/Coding/biologyQuizWebsite/frontend/src/Help.js":"5"},{"size":410,"mtime":1610964765359,"results":"6","hashOfConfig":"7"},{"size":568,"mtime":1612268042460,"results":"8","hashOfConfig":"7"},{"size":3931,"mtime":1612269061333,"results":"9","hashOfConfig":"7"},{"size":2071,"mtime":1612267589504,"results":"10","hashOfConfig":"7"},{"size":1555,"mtime":1612297824222,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"zu1et9",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/dovieshalev/Documents/Coding/biologyQuizWebsite/frontend/src/index.js",[],["25","26"],"/Users/dovieshalev/Documents/Coding/biologyQuizWebsite/frontend/src/App.js",[],"/Users/dovieshalev/Documents/Coding/biologyQuizWebsite/frontend/src/Quiz.js",["27","28"],"import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Link } from \"react-router-dom\";\nimport { useParams } from \"react-router\";\n\nfunction Quiz() {\n  const [quizJson, setQuizJson] = useState({});\n  const [currentQuestion, setCurrentQuestion] = useState({ answers: [] });\n  const [showQuestion, setShowQuestion] = useState(true);\n  const [showQuiz, setShowQuiz] = useState(true);\n\n  let { id } = useParams();\n\n  useEffect(() => {\n    const allQuizData = require(\"./data/quizData.json\");\n    const myQuizData = allQuizData[id];\n    setQuizJson(myQuizData);\n    console.log(\"updated Quiz Json, it is now: \");\n    console.log(quizJson);\n  });\n\n  useEffect(() => {\n    console.log(\"Running useEffect on quizJson update\");\n    if (quizJson.questions !== undefined) {\n      setCurrentQuestion(quizJson.questions[0]);\n      console.log(\"currentQuestion is:\");\n      console.log(currentQuestion);\n    }\n  }, [quizJson]);\n\n  var QuizPage = () => {\n    return (\n      <div className=\"quizPage\">\n        {showQuestion ? <Question /> : <Explanation />}\n      </div>\n    );\n  };\n\n  var Question = () => {\n    return (\n      <div className=\"questionWrapper\">\n        <h3 className=\"questionText\">{currentQuestion.questionText}</h3>\n        <div className=\"answerArray\">\n          {currentQuestion.answers.map((answer) => {\n            return (\n              <button\n                className=\"answerButton\"\n                onClick={answerButtonPressed}\n                value={answer.correct}\n              >\n                {answer.answerText}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  var Explanation = () => {\n    return (\n      <div className=\"explanationWrapper\">\n        <h3 className=\"explanationText\">{currentQuestion.explanationText}</h3>\n        <button\n          className=\"buttonText\"\n          id=\"explanationButton\"\n          onClick={explanationButtonPressed}\n        >\n          Next Question\n        </button>\n      </div>\n    );\n  };\n\n  var EndScreen = () => {\n    return (\n      <div className=\"explanationWrapper\">\n        <h3 className=\"explanationText\">\n          Congrats! You did it! A whole quiz, that must be really tough. You\n          deserve a pat on your back, I'm impressed. Good Luck on your test and\n          say hi to Ms. Brandriss for me!\n        </h3>\n        <Link to=\"/\" className=\"buttonText\" id=\"endScreenButton\">\n          Go Back to Quizzes\n        </Link>\n      </div>\n    );\n  };\n\n  function answerButtonPressed(e) {\n    console.log(\"Answer button pressed, value is: \");\n    console.log(e.target.value);\n    if (e.target.value === \"true\") {\n      console.log(\"Found the right answer\");\n      if (currentQuestion.explanationText === \"\") {\n        explanationButtonPressed();\n      } else {\n        setShowQuestion(false);\n      }\n    } else {\n      e.target.style.color = \"#eb4460\";\n    }\n  }\n\n  function explanationButtonPressed(e) {\n    var nextQuestion;\n    for (var i = 0; i < quizJson.questions.length; i++) {\n      const question = quizJson.questions[i];\n      if (question === currentQuestion) {\n        console.log(\"found same question!\");\n        nextQuestion = i + 1;\n        break;\n      }\n    }\n    console.log(\"Next Question is: \");\n    console.log(nextQuestion);\n    if (nextQuestion !== quizJson.questions.length) {\n      setCurrentQuestion(quizJson.questions[nextQuestion]);\n      setShowQuestion(true);\n    } else {\n      console.log(\"No more questions!\");\n      setShowQuiz(false);\n    }\n  }\n  return (\n    <div className=\"main\">\n      <div className=\"header\">\n        <Link to=\"/\" className=\"buttonText\" id=\"backButton\">\n          Back\n        </Link>\n\n        <h1 className=\"headerTitle\">Biology Quizzes</h1>\n        <Link to=\"/help\" className=\"buttonText\" id=\"helpButton\">\n          ?\n        </Link>\n      </div>\n      {showQuiz ? <QuizPage /> : <EndScreen />}\n    </div>\n  );\n}\n\nexport default Quiz;\n","/Users/dovieshalev/Documents/Coding/biologyQuizWebsite/frontend/src/Home.js",[],["29","30"],"/Users/dovieshalev/Documents/Coding/biologyQuizWebsite/frontend/src/Help.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":14,"column":3,"nodeType":"37","endLine":14,"endColumn":12,"suggestions":"38"},{"ruleId":"35","severity":1,"message":"39","line":29,"column":6,"nodeType":"40","endLine":29,"endColumn":16,"suggestions":"41"},{"ruleId":"31","replacedBy":"42"},{"ruleId":"33","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setQuizJson'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [id, quizJson] as a second argument to the useEffect Hook.","Identifier",["46"],"React Hook useEffect has a missing dependency: 'currentQuestion'. Either include it or remove the dependency array.","ArrayExpression",["47"],["44"],["45"],"no-global-assign","no-unsafe-negation",{"desc":"48","fix":"49"},{"desc":"50","fix":"51"},"Add dependencies array: [id, quizJson]",{"range":"52","text":"53"},"Update the dependencies array to be: [currentQuestion, quizJson]",{"range":"54","text":"55"},[662,662],", [id, quizJson]",[925,935],"[currentQuestion, quizJson]"]